#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
 
int main() {
    pid_t pid = fork();
 
    if (pid > 0) {
        printf("Parent: sleeping 5 seconds to create zombie\n");
        sleep(5);
        wait(NULL);
        printf("Parent: child has been reaped\n");
 
        pid_t orphan_pid = fork();
        if (orphan_pid == 0) {
            sleep(10);
            execlp("ls", "ls", NULL);
        } else {
            printf("Parent: exiting before orphan child completes\n");
            exit(0);
        }
    } else if (pid == 0) {
        printf("Child: exiting to become zombie\n");
        exit(0);
    }
 
    return 0;
}
 
 
 
 
#include <stdio.h>
#include <stdlib.h>
 
struct Process { int pid; int bt; int pr; };
 
void fcfs(struct Process p[], int n) {
    int wt[n], tat[n];
    wt[0] = 0;
    for (int i = 1; i < n; i++)
        wt[i] = wt[i-1] + p[i-1].bt;
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + p[i].bt;
        printf("PID:%d WT:%d TAT:%d\n", p[i].pid, wt[i], tat[i]);
    }
}
 
void sjf(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n-1; i++)
        for (int j = i+1; j < n; j++)
            if (p[i].bt > p[j].bt) {
                temp = p[i]; p[i] = p[j]; p[j] = temp;
            }
    printf("\nSJF Scheduling:\n");
    fcfs(p, n);
}
 
void priority(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n-1; i++)
        for (int j = i+1; j < n; j++)
            if (p[i].pr > p[j].pr) {
                temp = p[i]; p[i] = p[j]; p[j] = temp;
            }
    printf("\nPriority Scheduling:\n");
    fcfs(p, n);
}
 
int main() {
    struct Process p[3] = {{1, 10, 2}, {2, 5, 1}, {3, 8, 3}};
    printf("FCFS Scheduling:\n");
    fcfs(p, 3);
    sjf(p, 3);
    priority(p, 3);
    return 0;
}
 
 
 
 
 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
 
int A[2][2] = {{1, 2}, {3, 4}};
int B[2][2] = {{5, 6}, {7, 8}};
int C[2][2];
 
struct ThreadArgs {
    int row;
    int col;
};
 
void* multiply(void* arg) {
    struct ThreadArgs* args = (struct ThreadArgs*)arg;
    int sum = 0;
    for (int i = 0; i < 2; i++)
        sum += A[args->row][i] * B[i][args->col];
    int* result = malloc(sizeof(int));
    *result = sum;
    pthread_exit(result);
}
 
int main() {
    pthread_t threads[4];
    int index = 0;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            struct ThreadArgs* args = malloc(sizeof(struct ThreadArgs));
            args->row = i;
            args->col = j;
            pthread_create(&threads[index++], NULL, multiply, args);
        }
    }
 
    index = 0;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            int* res;
            pthread_join(threads[index++], (void**)&res);
            C[i][j] = *res;
            free(res);
        }
    }
 
    printf("Result Matrix C:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++)
            printf("%d ", C[i][j]);
        printf("\n");
    }
 
    return 0;
}
 
 
 
 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
 
#define SIZE 5
int buffer[SIZE];
int in = 0, out = 0;
 
sem_t empty, full;
pthread_mutex_t mutex;
 
void* producer(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[in] = i + 1;
        in = (in + 1) % SIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
    }
    return NULL;
}
 
void* consumer(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        int item = buffer[out];
        out = (out + 1) % SIZE;
        printf("Consumed: %d\n", item);
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
    }
    return NULL;
}
 
int main() {
    pthread_t prod, cons;
    sem_init(&empty, 0, SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);
 
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
 
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
 
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    return 0;
}
